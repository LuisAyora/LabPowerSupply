
LabPowerSupply.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001f0  00800100  00000696  0000070a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000696  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000008fa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000092c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000180  00000000  00000000  0000096c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000016c0  00000000  00000000  00000aec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a5f  00000000  00000000  000021ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ba1  00000000  00000000  00002c0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002f8  00000000  00000000  000037ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000884  00000000  00000000  00003aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a7f  00000000  00000000  00004328  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000120  00000000  00000000  00004da7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <__vector_1>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 0f 03 	jmp	0x61e	; 0x61e <__vector_14>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__vector_21>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	de 02       	muls	r29, r30
  6a:	e4 02       	muls	r30, r20
  6c:	ea 02       	muls	r30, r26
  6e:	f0 02       	muls	r31, r16
  70:	f6 02       	muls	r31, r22
  72:	fc 02       	muls	r31, r28
  74:	02 03       	mulsu	r16, r18

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf ef       	ldi	r28, 0xFF	; 255
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_copy_data>:
  82:	12 e0       	ldi	r17, 0x02	; 2
  84:	a0 e0       	ldi	r26, 0x00	; 0
  86:	b1 e0       	ldi	r27, 0x01	; 1
  88:	e6 e9       	ldi	r30, 0x96	; 150
  8a:	f6 e0       	ldi	r31, 0x06	; 6
  8c:	02 c0       	rjmp	.+4      	; 0x92 <__do_copy_data+0x10>
  8e:	05 90       	lpm	r0, Z+
  90:	0d 92       	st	X+, r0
  92:	a0 3f       	cpi	r26, 0xF0	; 240
  94:	b1 07       	cpc	r27, r17
  96:	d9 f7       	brne	.-10     	; 0x8e <__do_copy_data+0xc>
  98:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  9c:	0c 94 49 03 	jmp	0x692	; 0x692 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <__vector_21>:

void ADC_In(void) {
	
}

ISR (ADC_vect) {
  a4:	1f 92       	push	r1
  a6:	0f 92       	push	r0
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	0f 92       	push	r0
  ac:	11 24       	eor	r1, r1
  ae:	8f 93       	push	r24
	TIFR0 = (1 << OCF0A);
  b0:	82 e0       	ldi	r24, 0x02	; 2
  b2:	85 bb       	out	0x15, r24	; 21
}
  b4:	8f 91       	pop	r24
  b6:	0f 90       	pop	r0
  b8:	0f be       	out	0x3f, r0	; 63
  ba:	0f 90       	pop	r0
  bc:	1f 90       	pop	r1
  be:	18 95       	reti

000000c0 <main>:
#include "Nokia5110.h"

int main(void) {
	//TIMER0A_EnableOnCTC();
	//ADC_Init();
	Nokia5110_Init();
  c0:	0e 94 33 02 	call	0x466	; 0x466 <Nokia5110_Init>

	sei();
  c4:	78 94       	sei

    while (1) 
    {
		Nokia5110_SetCursor(0, 0);
  c6:	60 e0       	ldi	r22, 0x00	; 0
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	0e 94 04 02 	call	0x408	; 0x408 <Nokia5110_SetCursor>
		Nokia5110_OutString("Hi Sarah!");
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <Nokia5110_OutString>
		Nokia5110_SetCursor(0, 1);
  d6:	61 e0       	ldi	r22, 0x01	; 1
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	0e 94 04 02 	call	0x408	; 0x408 <Nokia5110_SetCursor>
		Nokia5110_OutUnsignedDecimal(1);
  de:	61 e0       	ldi	r22, 0x01	; 1
  e0:	70 e0       	ldi	r23, 0x00	; 0
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	0e 94 e7 00 	call	0x1ce	; 0x1ce <Nokia5110_OutUnsignedDecimal>
		Nokia5110_SetCursor(0, 2);
  ea:	62 e0       	ldi	r22, 0x02	; 2
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	0e 94 04 02 	call	0x408	; 0x408 <Nokia5110_SetCursor>
		Nokia5110_OutUnsignedDecimal(69);
  f2:	65 e4       	ldi	r22, 0x45	; 69
  f4:	70 e0       	ldi	r23, 0x00	; 0
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 e7 00 	call	0x1ce	; 0x1ce <Nokia5110_OutUnsignedDecimal>
		Nokia5110_SetCursor(0, 3);
  fe:	63 e0       	ldi	r22, 0x03	; 3
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	0e 94 04 02 	call	0x408	; 0x408 <Nokia5110_SetCursor>
		Nokia5110_OutUnsignedDecimal(420);
 106:	64 ea       	ldi	r22, 0xA4	; 164
 108:	71 e0       	ldi	r23, 0x01	; 1
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	0e 94 e7 00 	call	0x1ce	; 0x1ce <Nokia5110_OutUnsignedDecimal>
		Nokia5110_SetCursor(0, 4);
 112:	64 e0       	ldi	r22, 0x04	; 4
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	0e 94 04 02 	call	0x408	; 0x408 <Nokia5110_SetCursor>
		Nokia5110_OutUnsignedDecimal(1234);
 11a:	62 ed       	ldi	r22, 0xD2	; 210
 11c:	74 e0       	ldi	r23, 0x04	; 4
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 e7 00 	call	0x1ce	; 0x1ce <Nokia5110_OutUnsignedDecimal>
		Nokia5110_SetCursor(0, 5);
 126:	65 e0       	ldi	r22, 0x05	; 5
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	0e 94 04 02 	call	0x408	; 0x408 <Nokia5110_SetCursor>
		Nokia5110_OutUnsignedDecimal(69420);
 12e:	6c e2       	ldi	r22, 0x2C	; 44
 130:	7f e0       	ldi	r23, 0x0F	; 15
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	0e 94 e7 00 	call	0x1ce	; 0x1ce <Nokia5110_OutUnsignedDecimal>
 13a:	c5 cf       	rjmp	.-118    	; 0xc6 <main+0x6>

0000013c <LCD_ConfigurePort>:
void Nokia5110_ClearScreen(void) {
	for (int i = 0; i < (LCD_WIDTH * LCD_HEIGHT/8); i++) {
		LCD_SendFrame(DATA, 0x00);
	}
	Nokia5110_SetCursor(0, 0);
}
 13c:	84 b1       	in	r24, 0x04	; 4
 13e:	87 60       	ori	r24, 0x07	; 7
 140:	84 b9       	out	0x04, r24	; 4
 142:	2a 9a       	sbi	0x05, 2	; 5
 144:	08 95       	ret

00000146 <LCD_SendFrame>:
 146:	81 30       	cpi	r24, 0x01	; 1
 148:	11 f4       	brne	.+4      	; 0x14e <LCD_SendFrame+0x8>
 14a:	29 9a       	sbi	0x05, 1	; 5
 14c:	03 c0       	rjmp	.+6      	; 0x154 <LCD_SendFrame+0xe>
 14e:	81 11       	cpse	r24, r1
 150:	01 c0       	rjmp	.+2      	; 0x154 <LCD_SendFrame+0xe>
 152:	29 98       	cbi	0x05, 1	; 5
 154:	2a 98       	cbi	0x05, 2	; 5
 156:	86 2f       	mov	r24, r22
 158:	0e 94 0a 03 	call	0x614	; 0x614 <SPI_MasterTransmit>
 15c:	2a 9a       	sbi	0x05, 2	; 5
 15e:	08 95       	ret

00000160 <Nokia5110_OutChar>:
 160:	0f 93       	push	r16
 162:	1f 93       	push	r17
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
 168:	c8 2f       	mov	r28, r24
 16a:	60 e0       	ldi	r22, 0x00	; 0
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	0e 94 a3 00 	call	0x146	; 0x146 <LCD_SendFrame>
 172:	8c 2f       	mov	r24, r28
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	ec 01       	movw	r28, r24
 178:	cc 0f       	add	r28, r28
 17a:	dd 1f       	adc	r29, r29
 17c:	cc 0f       	add	r28, r28
 17e:	dd 1f       	adc	r29, r29
 180:	c8 0f       	add	r28, r24
 182:	d9 1f       	adc	r29, r25
 184:	c1 59       	subi	r28, 0x91	; 145
 186:	df 4f       	sbci	r29, 0xFF	; 255
 188:	00 e0       	ldi	r16, 0x00	; 0
 18a:	10 e0       	ldi	r17, 0x00	; 0
 18c:	69 91       	ld	r22, Y+
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	0e 94 a3 00 	call	0x146	; 0x146 <LCD_SendFrame>
 194:	0f 5f       	subi	r16, 0xFF	; 255
 196:	1f 4f       	sbci	r17, 0xFF	; 255
 198:	05 30       	cpi	r16, 0x05	; 5
 19a:	11 05       	cpc	r17, r1
 19c:	b9 f7       	brne	.-18     	; 0x18c <Nokia5110_OutChar+0x2c>
 19e:	60 e0       	ldi	r22, 0x00	; 0
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	0e 94 a3 00 	call	0x146	; 0x146 <LCD_SendFrame>
 1a6:	df 91       	pop	r29
 1a8:	cf 91       	pop	r28
 1aa:	1f 91       	pop	r17
 1ac:	0f 91       	pop	r16
 1ae:	08 95       	ret

000001b0 <Nokia5110_OutString>:
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
 1b4:	ec 01       	movw	r28, r24
 1b6:	88 81       	ld	r24, Y
 1b8:	88 23       	and	r24, r24
 1ba:	31 f0       	breq	.+12     	; 0x1c8 <Nokia5110_OutString+0x18>
 1bc:	21 96       	adiw	r28, 0x01	; 1
 1be:	0e 94 b0 00 	call	0x160	; 0x160 <Nokia5110_OutChar>
 1c2:	89 91       	ld	r24, Y+
 1c4:	81 11       	cpse	r24, r1
 1c6:	fb cf       	rjmp	.-10     	; 0x1be <Nokia5110_OutString+0xe>
 1c8:	df 91       	pop	r29
 1ca:	cf 91       	pop	r28
 1cc:	08 95       	ret

000001ce <Nokia5110_OutUnsignedDecimal>:
 1ce:	cf 92       	push	r12
 1d0:	df 92       	push	r13
 1d2:	ef 92       	push	r14
 1d4:	ff 92       	push	r15
 1d6:	cf 93       	push	r28
 1d8:	6b 01       	movw	r12, r22
 1da:	7c 01       	movw	r14, r24
 1dc:	8a e0       	ldi	r24, 0x0A	; 10
 1de:	c8 16       	cp	r12, r24
 1e0:	d1 04       	cpc	r13, r1
 1e2:	e1 04       	cpc	r14, r1
 1e4:	f1 04       	cpc	r15, r1
 1e6:	48 f4       	brcc	.+18     	; 0x1fa <Nokia5110_OutUnsignedDecimal+0x2c>
 1e8:	8a e0       	ldi	r24, 0x0A	; 10
 1ea:	91 e0       	ldi	r25, 0x01	; 1
 1ec:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <Nokia5110_OutString>
 1f0:	80 e3       	ldi	r24, 0x30	; 48
 1f2:	8c 0d       	add	r24, r12
 1f4:	0e 94 b0 00 	call	0x160	; 0x160 <Nokia5110_OutChar>
 1f8:	ba c0       	rjmp	.+372    	; 0x36e <Nokia5110_OutUnsignedDecimal+0x1a0>
 1fa:	84 e6       	ldi	r24, 0x64	; 100
 1fc:	c8 16       	cp	r12, r24
 1fe:	d1 04       	cpc	r13, r1
 200:	e1 04       	cpc	r14, r1
 202:	f1 04       	cpc	r15, r1
 204:	b0 f4       	brcc	.+44     	; 0x232 <Nokia5110_OutUnsignedDecimal+0x64>
 206:	8b e0       	ldi	r24, 0x0B	; 11
 208:	91 e0       	ldi	r25, 0x01	; 1
 20a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <Nokia5110_OutString>
 20e:	c7 01       	movw	r24, r14
 210:	b6 01       	movw	r22, r12
 212:	2a e0       	ldi	r18, 0x0A	; 10
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	40 e0       	ldi	r20, 0x00	; 0
 218:	50 e0       	ldi	r21, 0x00	; 0
 21a:	0e 94 21 03 	call	0x642	; 0x642 <__udivmodsi4>
 21e:	c6 2f       	mov	r28, r22
 220:	80 e3       	ldi	r24, 0x30	; 48
 222:	82 0f       	add	r24, r18
 224:	0e 94 b0 00 	call	0x160	; 0x160 <Nokia5110_OutChar>
 228:	80 e3       	ldi	r24, 0x30	; 48
 22a:	8c 0f       	add	r24, r28
 22c:	0e 94 b0 00 	call	0x160	; 0x160 <Nokia5110_OutChar>
 230:	9e c0       	rjmp	.+316    	; 0x36e <Nokia5110_OutUnsignedDecimal+0x1a0>
 232:	88 ee       	ldi	r24, 0xE8	; 232
 234:	c8 16       	cp	r12, r24
 236:	83 e0       	ldi	r24, 0x03	; 3
 238:	d8 06       	cpc	r13, r24
 23a:	e1 04       	cpc	r14, r1
 23c:	f1 04       	cpc	r15, r1
 23e:	20 f5       	brcc	.+72     	; 0x288 <Nokia5110_OutUnsignedDecimal+0xba>
 240:	8c e0       	ldi	r24, 0x0C	; 12
 242:	91 e0       	ldi	r25, 0x01	; 1
 244:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <Nokia5110_OutString>
 248:	c7 01       	movw	r24, r14
 24a:	b6 01       	movw	r22, r12
 24c:	24 e6       	ldi	r18, 0x64	; 100
 24e:	30 e0       	ldi	r19, 0x00	; 0
 250:	40 e0       	ldi	r20, 0x00	; 0
 252:	50 e0       	ldi	r21, 0x00	; 0
 254:	0e 94 21 03 	call	0x642	; 0x642 <__udivmodsi4>
 258:	6b 01       	movw	r12, r22
 25a:	7c 01       	movw	r14, r24
 25c:	80 e3       	ldi	r24, 0x30	; 48
 25e:	82 0f       	add	r24, r18
 260:	0e 94 b0 00 	call	0x160	; 0x160 <Nokia5110_OutChar>
 264:	c7 01       	movw	r24, r14
 266:	b6 01       	movw	r22, r12
 268:	2a e0       	ldi	r18, 0x0A	; 10
 26a:	30 e0       	ldi	r19, 0x00	; 0
 26c:	40 e0       	ldi	r20, 0x00	; 0
 26e:	50 e0       	ldi	r21, 0x00	; 0
 270:	0e 94 21 03 	call	0x642	; 0x642 <__udivmodsi4>
 274:	c6 2f       	mov	r28, r22
 276:	80 e3       	ldi	r24, 0x30	; 48
 278:	82 0f       	add	r24, r18
 27a:	0e 94 b0 00 	call	0x160	; 0x160 <Nokia5110_OutChar>
 27e:	80 e3       	ldi	r24, 0x30	; 48
 280:	8c 0f       	add	r24, r28
 282:	0e 94 b0 00 	call	0x160	; 0x160 <Nokia5110_OutChar>
 286:	73 c0       	rjmp	.+230    	; 0x36e <Nokia5110_OutUnsignedDecimal+0x1a0>
 288:	80 e1       	ldi	r24, 0x10	; 16
 28a:	c8 16       	cp	r12, r24
 28c:	87 e2       	ldi	r24, 0x27	; 39
 28e:	d8 06       	cpc	r13, r24
 290:	e1 04       	cpc	r14, r1
 292:	f1 04       	cpc	r15, r1
 294:	88 f5       	brcc	.+98     	; 0x2f8 <Nokia5110_OutUnsignedDecimal+0x12a>
 296:	80 e2       	ldi	r24, 0x20	; 32
 298:	0e 94 b0 00 	call	0x160	; 0x160 <Nokia5110_OutChar>
 29c:	c7 01       	movw	r24, r14
 29e:	b6 01       	movw	r22, r12
 2a0:	28 ee       	ldi	r18, 0xE8	; 232
 2a2:	33 e0       	ldi	r19, 0x03	; 3
 2a4:	40 e0       	ldi	r20, 0x00	; 0
 2a6:	50 e0       	ldi	r21, 0x00	; 0
 2a8:	0e 94 21 03 	call	0x642	; 0x642 <__udivmodsi4>
 2ac:	6b 01       	movw	r12, r22
 2ae:	7c 01       	movw	r14, r24
 2b0:	80 e3       	ldi	r24, 0x30	; 48
 2b2:	82 0f       	add	r24, r18
 2b4:	0e 94 b0 00 	call	0x160	; 0x160 <Nokia5110_OutChar>
 2b8:	c7 01       	movw	r24, r14
 2ba:	b6 01       	movw	r22, r12
 2bc:	24 e6       	ldi	r18, 0x64	; 100
 2be:	30 e0       	ldi	r19, 0x00	; 0
 2c0:	40 e0       	ldi	r20, 0x00	; 0
 2c2:	50 e0       	ldi	r21, 0x00	; 0
 2c4:	0e 94 21 03 	call	0x642	; 0x642 <__udivmodsi4>
 2c8:	6b 01       	movw	r12, r22
 2ca:	7c 01       	movw	r14, r24
 2cc:	80 e3       	ldi	r24, 0x30	; 48
 2ce:	82 0f       	add	r24, r18
 2d0:	0e 94 b0 00 	call	0x160	; 0x160 <Nokia5110_OutChar>
 2d4:	c7 01       	movw	r24, r14
 2d6:	b6 01       	movw	r22, r12
 2d8:	2a e0       	ldi	r18, 0x0A	; 10
 2da:	30 e0       	ldi	r19, 0x00	; 0
 2dc:	40 e0       	ldi	r20, 0x00	; 0
 2de:	50 e0       	ldi	r21, 0x00	; 0
 2e0:	0e 94 21 03 	call	0x642	; 0x642 <__udivmodsi4>
 2e4:	c6 2f       	mov	r28, r22
 2e6:	80 e3       	ldi	r24, 0x30	; 48
 2e8:	82 0f       	add	r24, r18
 2ea:	0e 94 b0 00 	call	0x160	; 0x160 <Nokia5110_OutChar>
 2ee:	80 e3       	ldi	r24, 0x30	; 48
 2f0:	8c 0f       	add	r24, r28
 2f2:	0e 94 b0 00 	call	0x160	; 0x160 <Nokia5110_OutChar>
 2f6:	3b c0       	rjmp	.+118    	; 0x36e <Nokia5110_OutUnsignedDecimal+0x1a0>
 2f8:	c7 01       	movw	r24, r14
 2fa:	b6 01       	movw	r22, r12
 2fc:	20 e1       	ldi	r18, 0x10	; 16
 2fe:	37 e2       	ldi	r19, 0x27	; 39
 300:	40 e0       	ldi	r20, 0x00	; 0
 302:	50 e0       	ldi	r21, 0x00	; 0
 304:	0e 94 21 03 	call	0x642	; 0x642 <__udivmodsi4>
 308:	6b 01       	movw	r12, r22
 30a:	7c 01       	movw	r14, r24
 30c:	80 e3       	ldi	r24, 0x30	; 48
 30e:	82 0f       	add	r24, r18
 310:	0e 94 b0 00 	call	0x160	; 0x160 <Nokia5110_OutChar>
 314:	c7 01       	movw	r24, r14
 316:	b6 01       	movw	r22, r12
 318:	28 ee       	ldi	r18, 0xE8	; 232
 31a:	33 e0       	ldi	r19, 0x03	; 3
 31c:	40 e0       	ldi	r20, 0x00	; 0
 31e:	50 e0       	ldi	r21, 0x00	; 0
 320:	0e 94 21 03 	call	0x642	; 0x642 <__udivmodsi4>
 324:	6b 01       	movw	r12, r22
 326:	7c 01       	movw	r14, r24
 328:	80 e3       	ldi	r24, 0x30	; 48
 32a:	82 0f       	add	r24, r18
 32c:	0e 94 b0 00 	call	0x160	; 0x160 <Nokia5110_OutChar>
 330:	c7 01       	movw	r24, r14
 332:	b6 01       	movw	r22, r12
 334:	24 e6       	ldi	r18, 0x64	; 100
 336:	30 e0       	ldi	r19, 0x00	; 0
 338:	40 e0       	ldi	r20, 0x00	; 0
 33a:	50 e0       	ldi	r21, 0x00	; 0
 33c:	0e 94 21 03 	call	0x642	; 0x642 <__udivmodsi4>
 340:	6b 01       	movw	r12, r22
 342:	7c 01       	movw	r14, r24
 344:	80 e3       	ldi	r24, 0x30	; 48
 346:	82 0f       	add	r24, r18
 348:	0e 94 b0 00 	call	0x160	; 0x160 <Nokia5110_OutChar>
 34c:	c7 01       	movw	r24, r14
 34e:	b6 01       	movw	r22, r12
 350:	2a e0       	ldi	r18, 0x0A	; 10
 352:	30 e0       	ldi	r19, 0x00	; 0
 354:	40 e0       	ldi	r20, 0x00	; 0
 356:	50 e0       	ldi	r21, 0x00	; 0
 358:	0e 94 21 03 	call	0x642	; 0x642 <__udivmodsi4>
 35c:	c6 2f       	mov	r28, r22
 35e:	80 e3       	ldi	r24, 0x30	; 48
 360:	82 0f       	add	r24, r18
 362:	0e 94 b0 00 	call	0x160	; 0x160 <Nokia5110_OutChar>
 366:	80 e3       	ldi	r24, 0x30	; 48
 368:	8c 0f       	add	r24, r28
 36a:	0e 94 b0 00 	call	0x160	; 0x160 <Nokia5110_OutChar>
 36e:	cf 91       	pop	r28
 370:	ff 90       	pop	r15
 372:	ef 90       	pop	r14
 374:	df 90       	pop	r13
 376:	cf 90       	pop	r12
 378:	08 95       	ret

0000037a <LCD_Initialisation>:
 37a:	28 98       	cbi	0x05, 0	; 5
 37c:	2f ef       	ldi	r18, 0xFF	; 255
 37e:	81 ee       	ldi	r24, 0xE1	; 225
 380:	94 e0       	ldi	r25, 0x04	; 4
 382:	21 50       	subi	r18, 0x01	; 1
 384:	80 40       	sbci	r24, 0x00	; 0
 386:	90 40       	sbci	r25, 0x00	; 0
 388:	e1 f7       	brne	.-8      	; 0x382 <LCD_Initialisation+0x8>
 38a:	00 c0       	rjmp	.+0      	; 0x38c <LCD_Initialisation+0x12>
 38c:	00 00       	nop
 38e:	28 9a       	sbi	0x05, 0	; 5
 390:	08 95       	ret

00000392 <LCD_FunctionSet>:
 392:	81 30       	cpi	r24, 0x01	; 1
 394:	11 f4       	brne	.+4      	; 0x39a <LCD_FunctionSet+0x8>
 396:	84 e0       	ldi	r24, 0x04	; 4
 398:	01 c0       	rjmp	.+2      	; 0x39c <LCD_FunctionSet+0xa>
 39a:	80 e0       	ldi	r24, 0x00	; 0
 39c:	61 11       	cpse	r22, r1
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <LCD_FunctionSet+0x12>
 3a0:	8d 7f       	andi	r24, 0xFD	; 253
 3a2:	03 c0       	rjmp	.+6      	; 0x3aa <LCD_FunctionSet+0x18>
 3a4:	61 30       	cpi	r22, 0x01	; 1
 3a6:	09 f4       	brne	.+2      	; 0x3aa <LCD_FunctionSet+0x18>
 3a8:	82 60       	ori	r24, 0x02	; 2
 3aa:	41 11       	cpse	r20, r1
 3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <LCD_FunctionSet+0x20>
 3ae:	8e 7f       	andi	r24, 0xFE	; 254
 3b0:	03 c0       	rjmp	.+6      	; 0x3b8 <LCD_FunctionSet+0x26>
 3b2:	41 30       	cpi	r20, 0x01	; 1
 3b4:	09 f4       	brne	.+2      	; 0x3b8 <LCD_FunctionSet+0x26>
 3b6:	81 60       	ori	r24, 0x01	; 1
 3b8:	68 2f       	mov	r22, r24
 3ba:	60 62       	ori	r22, 0x20	; 32
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	0e 94 a3 00 	call	0x146	; 0x146 <LCD_SendFrame>
 3c2:	08 95       	ret

000003c4 <LCD_DisplayControl>:
 3c4:	82 30       	cpi	r24, 0x02	; 2
 3c6:	31 f0       	breq	.+12     	; 0x3d4 <LCD_DisplayControl+0x10>
 3c8:	83 30       	cpi	r24, 0x03	; 3
 3ca:	31 f0       	breq	.+12     	; 0x3d8 <LCD_DisplayControl+0x14>
 3cc:	81 30       	cpi	r24, 0x01	; 1
 3ce:	31 f4       	brne	.+12     	; 0x3dc <LCD_DisplayControl+0x18>
 3d0:	64 e0       	ldi	r22, 0x04	; 4
 3d2:	05 c0       	rjmp	.+10     	; 0x3de <LCD_DisplayControl+0x1a>
 3d4:	61 e0       	ldi	r22, 0x01	; 1
 3d6:	03 c0       	rjmp	.+6      	; 0x3de <LCD_DisplayControl+0x1a>
 3d8:	65 e0       	ldi	r22, 0x05	; 5
 3da:	01 c0       	rjmp	.+2      	; 0x3de <LCD_DisplayControl+0x1a>
 3dc:	60 e0       	ldi	r22, 0x00	; 0
 3de:	68 60       	ori	r22, 0x08	; 8
 3e0:	80 e0       	ldi	r24, 0x00	; 0
 3e2:	0e 94 a3 00 	call	0x146	; 0x146 <LCD_SendFrame>
 3e6:	08 95       	ret

000003e8 <LCD_SetYAddressOfRAM>:
 3e8:	86 30       	cpi	r24, 0x06	; 6
 3ea:	28 f4       	brcc	.+10     	; 0x3f6 <LCD_SetYAddressOfRAM+0xe>
 3ec:	68 2f       	mov	r22, r24
 3ee:	60 64       	ori	r22, 0x40	; 64
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	0e 94 a3 00 	call	0x146	; 0x146 <LCD_SendFrame>
 3f6:	08 95       	ret

000003f8 <LCD_SetXAddressOfRAM>:
 3f8:	84 35       	cpi	r24, 0x54	; 84
 3fa:	28 f4       	brcc	.+10     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3fc:	68 2f       	mov	r22, r24
 3fe:	60 68       	ori	r22, 0x80	; 128
 400:	80 e0       	ldi	r24, 0x00	; 0
 402:	0e 94 a3 00 	call	0x146	; 0x146 <LCD_SendFrame>
 406:	08 95       	ret

00000408 <Nokia5110_SetCursor>:
 408:	cf 93       	push	r28
 40a:	8c 30       	cpi	r24, 0x0C	; 12
 40c:	70 f4       	brcc	.+28     	; 0x42a <Nokia5110_SetCursor+0x22>
 40e:	66 30       	cpi	r22, 0x06	; 6
 410:	60 f4       	brcc	.+24     	; 0x42a <Nokia5110_SetCursor+0x22>
 412:	c6 2f       	mov	r28, r22
 414:	98 2f       	mov	r25, r24
 416:	99 0f       	add	r25, r25
 418:	99 0f       	add	r25, r25
 41a:	99 0f       	add	r25, r25
 41c:	98 1b       	sub	r25, r24
 41e:	89 2f       	mov	r24, r25
 420:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LCD_SetXAddressOfRAM>
 424:	8c 2f       	mov	r24, r28
 426:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <LCD_SetYAddressOfRAM>
 42a:	cf 91       	pop	r28
 42c:	08 95       	ret

0000042e <LCD_TemperatureControl>:
}

void LCD_TemperatureControl(enum TemperatureCoefficient tc) {
	uint8_t temperatureControlFrame = 0x00;

	switch (tc) {
 42e:	82 30       	cpi	r24, 0x02	; 2
 430:	31 f0       	breq	.+12     	; 0x43e <LCD_TemperatureControl+0x10>
 432:	83 30       	cpi	r24, 0x03	; 3
 434:	31 f0       	breq	.+12     	; 0x442 <LCD_TemperatureControl+0x14>
 436:	81 30       	cpi	r24, 0x01	; 1
 438:	31 f4       	brne	.+12     	; 0x446 <LCD_TemperatureControl+0x18>
		case TEMPERATURE_COEFF_0:
			temperatureControlFrame &= ~((1 << DB1) | (1 << DB0));
			break;
		case TEMPERATURE_COEFF_1:
			temperatureControlFrame |= (1 << DB0);
			temperatureControlFrame &= ~(1 << DB1);
 43a:	61 e0       	ldi	r22, 0x01	; 1
 43c:	05 c0       	rjmp	.+10     	; 0x448 <LCD_TemperatureControl+0x1a>
			break;
		case TEMPERATURE_COEFF_2:
			temperatureControlFrame |= (1 << DB1);
			temperatureControlFrame &= ~(1 << DB0);
 43e:	62 e0       	ldi	r22, 0x02	; 2
			break;
 440:	03 c0       	rjmp	.+6      	; 0x448 <LCD_TemperatureControl+0x1a>
		case TEMPERATURE_COEFF_3:
			temperatureControlFrame |= ((1 << DB1) | (1 << DB0));
 442:	63 e0       	ldi	r22, 0x03	; 3
			break;
 444:	01 c0       	rjmp	.+2      	; 0x448 <LCD_TemperatureControl+0x1a>

	LCD_SendFrame(COMMAND, xAddress);
}

void LCD_TemperatureControl(enum TemperatureCoefficient tc) {
	uint8_t temperatureControlFrame = 0x00;
 446:	60 e0       	ldi	r22, 0x00	; 0
			break;
	}

	temperatureControlFrame |= (1 << DB2);

	LCD_SendFrame(COMMAND, temperatureControlFrame);
 448:	64 60       	ori	r22, 0x04	; 4
 44a:	80 e0       	ldi	r24, 0x00	; 0
 44c:	0e 94 a3 00 	call	0x146	; 0x146 <LCD_SendFrame>
 450:	08 95       	ret

00000452 <LCD_BiasValue>:
};

void LCD_BiasValue(void) {
	LCD_SendFrame(COMMAND, 0x13); // LCD bias mode 1:48. Can try 0x14 too
 452:	63 e1       	ldi	r22, 0x13	; 19
 454:	80 e0       	ldi	r24, 0x00	; 0
 456:	0e 94 a3 00 	call	0x146	; 0x146 <LCD_SendFrame>
 45a:	08 95       	ret

0000045c <LCD_SetVopValue>:
}

void LCD_SetVopValue(uint8_t contrast) {
	LCD_SendFrame(COMMAND, contrast);
 45c:	68 2f       	mov	r22, r24
 45e:	80 e0       	ldi	r24, 0x00	; 0
 460:	0e 94 a3 00 	call	0x146	; 0x146 <LCD_SendFrame>
 464:	08 95       	ret

00000466 <Nokia5110_Init>:
 *		- Sparkfun blue LCD (0xB8)
 */
void LCD_SetVopValue(uint8_t contrast);

// Function implementations:
void Nokia5110_Init() {
 466:	ef 92       	push	r14
 468:	0f 93       	push	r16
	// Initialise SPI hardware and interface port:
	SPI_Init(MASTER, INTERRUPTS_DISABLED, MSB_FIRST, SCK_HIGH_ON_IDLE,
 46a:	0f 2e       	mov	r0, r31
 46c:	f5 e0       	ldi	r31, 0x05	; 5
 46e:	ef 2e       	mov	r14, r31
 470:	f0 2d       	mov	r31, r0
 472:	01 e0       	ldi	r16, 0x01	; 1
 474:	21 e0       	ldi	r18, 0x01	; 1
 476:	40 e0       	ldi	r20, 0x00	; 0
 478:	60 e0       	ldi	r22, 0x00	; 0
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	0e 94 90 02 	call	0x520	; 0x520 <SPI_Init>
			 SAMPLE_ON_TRAILING_EDGE, F_OSC_32);
	LCD_ConfigurePort();
 480:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_ConfigurePort>

	// Initialisation routine of the LCD:
	LCD_Initialisation();
 484:	0e 94 bd 01 	call	0x37a	; 0x37a <LCD_Initialisation>
	LCD_FunctionSet(CHIP_ACTIVE, HORIZONTAL_ADDRESSING, 
 488:	41 e0       	ldi	r20, 0x01	; 1
 48a:	60 e0       	ldi	r22, 0x00	; 0
 48c:	80 e0       	ldi	r24, 0x00	; 0
 48e:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_FunctionSet>
					EXTENDED_INSTRUCTION_SET);
	LCD_BiasValue();
 492:	0e 94 29 02 	call	0x452	; 0x452 <LCD_BiasValue>
	LCD_TemperatureControl(TEMPERATURE_COEFF_0);
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	0e 94 17 02 	call	0x42e	; 0x42e <LCD_TemperatureControl>
	LCD_SetVopValue(CONTRAST);
 49c:	80 eb       	ldi	r24, 0xB0	; 176
 49e:	0e 94 2e 02 	call	0x45c	; 0x45c <LCD_SetVopValue>
	LCD_FunctionSet(CHIP_ACTIVE, HORIZONTAL_ADDRESSING, 
 4a2:	40 e0       	ldi	r20, 0x00	; 0
 4a4:	60 e0       	ldi	r22, 0x00	; 0
 4a6:	80 e0       	ldi	r24, 0x00	; 0
 4a8:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_FunctionSet>
					BASIC_INSTRUCTION_SET);
	LCD_DisplayControl(NORMAL_MODE);
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <LCD_DisplayControl>
}
 4b2:	0f 91       	pop	r16
 4b4:	ef 90       	pop	r14
 4b6:	08 95       	ret

000004b8 <__vector_1>:
 */ 

 #include <avr/io.h>
 #include <avr/interrupt.h>

 ISR (INT0_vect) {
 4b8:	1f 92       	push	r1
 4ba:	0f 92       	push	r0
 4bc:	0f b6       	in	r0, 0x3f	; 63
 4be:	0f 92       	push	r0
 4c0:	11 24       	eor	r1, r1
 4c2:	8f 93       	push	r24
 4c4:	9f 93       	push	r25
	 // static uint8_t LED = 0x00;
	 PORTB ^= (1 << PB0);
 4c6:	95 b1       	in	r25, 0x05	; 5
 4c8:	81 e0       	ldi	r24, 0x01	; 1
 4ca:	89 27       	eor	r24, r25
 4cc:	85 b9       	out	0x05, r24	; 5
 }
 4ce:	9f 91       	pop	r25
 4d0:	8f 91       	pop	r24
 4d2:	0f 90       	pop	r0
 4d4:	0f be       	out	0x3f, r0	; 63
 4d6:	0f 90       	pop	r0
 4d8:	1f 90       	pop	r1
 4da:	18 95       	reti

000004dc <SPI_SetClockRate>:
						break;
	}
}

void SPI_SetClockRate(uint8_t SPI2X_Level, uint8_t SPR1_Level, uint8_t SPR0_Level) {
	if (SPI2X_Level == SPI2X_HIGH) {
 4dc:	81 30       	cpi	r24, 0x01	; 1
 4de:	21 f4       	brne	.+8      	; 0x4e8 <SPI_SetClockRate+0xc>
		SPSR |= (1 << SPI2X);
 4e0:	8d b5       	in	r24, 0x2d	; 45
 4e2:	81 60       	ori	r24, 0x01	; 1
 4e4:	8d bd       	out	0x2d, r24	; 45
 4e6:	05 c0       	rjmp	.+10     	; 0x4f2 <SPI_SetClockRate+0x16>
	} else if (SPI2X_Level == SPI2X_LOW) {
 4e8:	81 11       	cpse	r24, r1
 4ea:	03 c0       	rjmp	.+6      	; 0x4f2 <SPI_SetClockRate+0x16>
		SPSR &= ~(1 << SPI2X);
 4ec:	8d b5       	in	r24, 0x2d	; 45
 4ee:	8e 7f       	andi	r24, 0xFE	; 254
 4f0:	8d bd       	out	0x2d, r24	; 45
	}

	if (SPR1_Level == SPR1_HIGH) {
 4f2:	61 30       	cpi	r22, 0x01	; 1
 4f4:	21 f4       	brne	.+8      	; 0x4fe <SPI_SetClockRate+0x22>
		SPCR |= (1 << SPR1);
 4f6:	8c b5       	in	r24, 0x2c	; 44
 4f8:	82 60       	ori	r24, 0x02	; 2
 4fa:	8c bd       	out	0x2c, r24	; 44
 4fc:	05 c0       	rjmp	.+10     	; 0x508 <SPI_SetClockRate+0x2c>
		} else if (SPR1_Level == SPR1_LOW) {
 4fe:	61 11       	cpse	r22, r1
 500:	03 c0       	rjmp	.+6      	; 0x508 <SPI_SetClockRate+0x2c>
		SPCR &= ~(1 << SPR1);
 502:	8c b5       	in	r24, 0x2c	; 44
 504:	8d 7f       	andi	r24, 0xFD	; 253
 506:	8c bd       	out	0x2c, r24	; 44
	}

	if (SPR0_Level == SPR0_HIGH) {
 508:	41 30       	cpi	r20, 0x01	; 1
 50a:	21 f4       	brne	.+8      	; 0x514 <SPI_SetClockRate+0x38>
		SPCR |= (1 << SPR0);
 50c:	8c b5       	in	r24, 0x2c	; 44
 50e:	81 60       	ori	r24, 0x01	; 1
 510:	8c bd       	out	0x2c, r24	; 44
 512:	08 95       	ret
		} else if (SPR0_Level == SPR0_LOW) {
 514:	41 11       	cpse	r20, r1
 516:	03 c0       	rjmp	.+6      	; 0x51e <SPI_SetClockRate+0x42>
		SPCR &= ~(1 << SPR0);
 518:	8c b5       	in	r24, 0x2c	; 44
 51a:	8e 7f       	andi	r24, 0xFE	; 254
 51c:	8c bd       	out	0x2c, r24	; 44
 51e:	08 95       	ret

00000520 <SPI_Init>:
// Function declarations:
void SPI_SetClockRate(uint8_t SPI2X_Level, uint8_t SPR1_Level, uint8_t SPR0_Level);

// Function implementations:
void SPI_Init(uint8_t Mode_Select, uint8_t Interrupt_Enable, uint8_t Data_Order,
			  uint8_t Clock_Polarity, uint8_t Clock_Phase, uint8_t Clock_Rate) {
 520:	ef 92       	push	r14
 522:	0f 93       	push	r16
	// Select mode
	if (Mode_Select == MASTER) {
 524:	81 30       	cpi	r24, 0x01	; 1
 526:	39 f4       	brne	.+14     	; 0x536 <SPI_Init+0x16>
		// MOSI, SS' and SCK as outputs, all the rest as input:
		DDR_SPI |= ((1 << DD_MOSI) | (1 << DD_SCK) | (1 << DD_SS));
 528:	84 b1       	in	r24, 0x04	; 4
 52a:	8c 62       	ori	r24, 0x2C	; 44
 52c:	84 b9       	out	0x04, r24	; 4
		DDR_SPI &= ~(1 << DD_MISO);
 52e:	24 98       	cbi	0x04, 4	; 4
		SPCR = ((1 << MSTR) | (1 << SPE));
 530:	80 e5       	ldi	r24, 0x50	; 80
 532:	8c bd       	out	0x2c, r24	; 44
 534:	0c c0       	rjmp	.+24     	; 0x54e <SPI_Init+0x2e>
	} else if(Mode_Select == SLAVE) {
 536:	81 11       	cpse	r24, r1
 538:	0a c0       	rjmp	.+20     	; 0x54e <SPI_Init+0x2e>
		// MISO as output, all others as input:
		DDR_SPI |= (1 << DD_MISO);
 53a:	24 9a       	sbi	0x04, 4	; 4
		DDR_SPI &= ~((1 << DD_MOSI) | (1 << DD_SCK) | (1 << DD_SS));
 53c:	84 b1       	in	r24, 0x04	; 4
 53e:	83 7d       	andi	r24, 0xD3	; 211
 540:	84 b9       	out	0x04, r24	; 4
		SPCR |= (1 << SPE);
 542:	8c b5       	in	r24, 0x2c	; 44
 544:	80 64       	ori	r24, 0x40	; 64
 546:	8c bd       	out	0x2c, r24	; 44
		SPCR &= ~(1 << MSTR);
 548:	8c b5       	in	r24, 0x2c	; 44
 54a:	8f 7e       	andi	r24, 0xEF	; 239
 54c:	8c bd       	out	0x2c, r24	; 44
	}
	// Select whether interrupts are enabled or 
	if (Interrupt_Enable == INTERRUPTS_ENABLED) {
 54e:	61 30       	cpi	r22, 0x01	; 1
 550:	21 f4       	brne	.+8      	; 0x55a <SPI_Init+0x3a>
		SPCR |= (1 << SPIE);
 552:	8c b5       	in	r24, 0x2c	; 44
 554:	80 68       	ori	r24, 0x80	; 128
 556:	8c bd       	out	0x2c, r24	; 44
 558:	05 c0       	rjmp	.+10     	; 0x564 <SPI_Init+0x44>
	} else if(Interrupt_Enable == INTERRUPTS_DISABLED) {
 55a:	61 11       	cpse	r22, r1
 55c:	03 c0       	rjmp	.+6      	; 0x564 <SPI_Init+0x44>
		SPCR &= ~(1 << SPIE);
 55e:	8c b5       	in	r24, 0x2c	; 44
 560:	8f 77       	andi	r24, 0x7F	; 127
 562:	8c bd       	out	0x2c, r24	; 44
	}
	// Select Data Order
	if (Data_Order == LSB_FIRST) {
 564:	41 30       	cpi	r20, 0x01	; 1
 566:	21 f4       	brne	.+8      	; 0x570 <SPI_Init+0x50>
		SPCR |= (1 << DORD);
 568:	8c b5       	in	r24, 0x2c	; 44
 56a:	80 62       	ori	r24, 0x20	; 32
 56c:	8c bd       	out	0x2c, r24	; 44
 56e:	05 c0       	rjmp	.+10     	; 0x57a <SPI_Init+0x5a>
	} else if(Data_Order == MSB_FIRST) {
 570:	41 11       	cpse	r20, r1
 572:	03 c0       	rjmp	.+6      	; 0x57a <SPI_Init+0x5a>
		SPCR &= ~(1 << DORD);
 574:	8c b5       	in	r24, 0x2c	; 44
 576:	8f 7d       	andi	r24, 0xDF	; 223
 578:	8c bd       	out	0x2c, r24	; 44
	}
	// Select Clock Polarity and Clock Phase Functionality
	if (Clock_Polarity == SCK_HIGH_ON_IDLE) {
 57a:	21 30       	cpi	r18, 0x01	; 1
 57c:	21 f4       	brne	.+8      	; 0x586 <SPI_Init+0x66>
		SPCR |= (1 << CPOL);
 57e:	8c b5       	in	r24, 0x2c	; 44
 580:	88 60       	ori	r24, 0x08	; 8
 582:	8c bd       	out	0x2c, r24	; 44
 584:	05 c0       	rjmp	.+10     	; 0x590 <SPI_Init+0x70>
	} else if(Clock_Polarity == SCK_LOW_ON_IDLE) {
 586:	21 11       	cpse	r18, r1
 588:	03 c0       	rjmp	.+6      	; 0x590 <SPI_Init+0x70>
		SPCR &= ~(1 << CPOL);
 58a:	8c b5       	in	r24, 0x2c	; 44
 58c:	87 7f       	andi	r24, 0xF7	; 247
 58e:	8c bd       	out	0x2c, r24	; 44
	}

	if (Clock_Phase == SAMPLE_ON_TRAILING_EDGE) {
 590:	01 30       	cpi	r16, 0x01	; 1
 592:	21 f4       	brne	.+8      	; 0x59c <SPI_Init+0x7c>
		SPCR |= (1 << CPHA);
 594:	8c b5       	in	r24, 0x2c	; 44
 596:	84 60       	ori	r24, 0x04	; 4
 598:	8c bd       	out	0x2c, r24	; 44
 59a:	05 c0       	rjmp	.+10     	; 0x5a6 <SPI_Init+0x86>
	} else if(Clock_Phase == SAMPLE_ON_LEADING_EDGE) {
 59c:	01 11       	cpse	r16, r1
 59e:	03 c0       	rjmp	.+6      	; 0x5a6 <SPI_Init+0x86>
		SPCR &= ~(1 << CPHA);
 5a0:	8c b5       	in	r24, 0x2c	; 44
 5a2:	8b 7f       	andi	r24, 0xFB	; 251
 5a4:	8c bd       	out	0x2c, r24	; 44
	}
	// Select Clock Rate
	switch (Clock_Rate) {
 5a6:	8e 2d       	mov	r24, r14
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	fc 01       	movw	r30, r24
 5ac:	31 97       	sbiw	r30, 0x01	; 1
 5ae:	e7 30       	cpi	r30, 0x07	; 7
 5b0:	f1 05       	cpc	r31, r1
 5b2:	68 f5       	brcc	.+90     	; 0x60e <SPI_Init+0xee>
 5b4:	ec 5c       	subi	r30, 0xCC	; 204
 5b6:	ff 4f       	sbci	r31, 0xFF	; 255
 5b8:	0c 94 43 03 	jmp	0x686	; 0x686 <__tablejump2__>
		case F_OSC_2:	SPI_SetClockRate(SPI2X_HIGH, SPR1_LOW, SPR0_LOW);
 5bc:	40 e0       	ldi	r20, 0x00	; 0
 5be:	60 e0       	ldi	r22, 0x00	; 0
 5c0:	81 e0       	ldi	r24, 0x01	; 1
 5c2:	0e 94 6e 02 	call	0x4dc	; 0x4dc <SPI_SetClockRate>
						break;
 5c6:	23 c0       	rjmp	.+70     	; 0x60e <SPI_Init+0xee>
		case F_OSC_4:	SPI_SetClockRate(SPI2X_LOW, SPR1_LOW, SPR0_LOW);
 5c8:	40 e0       	ldi	r20, 0x00	; 0
 5ca:	60 e0       	ldi	r22, 0x00	; 0
 5cc:	80 e0       	ldi	r24, 0x00	; 0
 5ce:	0e 94 6e 02 	call	0x4dc	; 0x4dc <SPI_SetClockRate>
						break;
 5d2:	1d c0       	rjmp	.+58     	; 0x60e <SPI_Init+0xee>
		case F_OSC_8:	SPI_SetClockRate(SPI2X_HIGH, SPR1_LOW, SPR0_HIGH);
 5d4:	41 e0       	ldi	r20, 0x01	; 1
 5d6:	60 e0       	ldi	r22, 0x00	; 0
 5d8:	81 e0       	ldi	r24, 0x01	; 1
 5da:	0e 94 6e 02 	call	0x4dc	; 0x4dc <SPI_SetClockRate>
						break;
 5de:	17 c0       	rjmp	.+46     	; 0x60e <SPI_Init+0xee>
		case F_OSC_16:	SPI_SetClockRate(SPI2X_LOW, SPR1_LOW, SPR0_HIGH);
 5e0:	41 e0       	ldi	r20, 0x01	; 1
 5e2:	60 e0       	ldi	r22, 0x00	; 0
 5e4:	80 e0       	ldi	r24, 0x00	; 0
 5e6:	0e 94 6e 02 	call	0x4dc	; 0x4dc <SPI_SetClockRate>
						break;
 5ea:	11 c0       	rjmp	.+34     	; 0x60e <SPI_Init+0xee>
		case F_OSC_32:	SPI_SetClockRate(SPI2X_HIGH, SPR1_HIGH, SPR0_LOW);
 5ec:	40 e0       	ldi	r20, 0x00	; 0
 5ee:	61 e0       	ldi	r22, 0x01	; 1
 5f0:	81 e0       	ldi	r24, 0x01	; 1
 5f2:	0e 94 6e 02 	call	0x4dc	; 0x4dc <SPI_SetClockRate>
						break;
 5f6:	0b c0       	rjmp	.+22     	; 0x60e <SPI_Init+0xee>
		case F_OSC_64:	SPI_SetClockRate(SPI2X_LOW, SPR1_HIGH, SPR0_LOW);
 5f8:	40 e0       	ldi	r20, 0x00	; 0
 5fa:	61 e0       	ldi	r22, 0x01	; 1
 5fc:	80 e0       	ldi	r24, 0x00	; 0
 5fe:	0e 94 6e 02 	call	0x4dc	; 0x4dc <SPI_SetClockRate>
						break;
 602:	05 c0       	rjmp	.+10     	; 0x60e <SPI_Init+0xee>
		case F_OSC_128: SPI_SetClockRate(SPI2X_LOW, SPR1_HIGH, SPR0_HIGH);
 604:	41 e0       	ldi	r20, 0x01	; 1
 606:	61 e0       	ldi	r22, 0x01	; 1
 608:	80 e0       	ldi	r24, 0x00	; 0
 60a:	0e 94 6e 02 	call	0x4dc	; 0x4dc <SPI_SetClockRate>
						break;
	}
}
 60e:	0f 91       	pop	r16
 610:	ef 90       	pop	r14
 612:	08 95       	ret

00000614 <SPI_MasterTransmit>:
	}
}

void SPI_MasterTransmit(char cData) {
	// Start transmission:
	SPDR = cData;
 614:	8e bd       	out	0x2e, r24	; 46
	
	// Wait for transmission to complete:
	while (!(SPSR & (1 << SPIF)))
 616:	0d b4       	in	r0, 0x2d	; 45
 618:	07 fe       	sbrs	r0, 7
 61a:	fd cf       	rjmp	.-6      	; 0x616 <SPI_MasterTransmit+0x2>
		;
}
 61c:	08 95       	ret

0000061e <__vector_14>:
	// Set clock pre-scaler to CLK/8:
	TCCR0B |= ((1 << CS01) | (1 << CS00));
	TCCR0B &= ~(1 << CS02);
}

ISR (TIMER0_COMPA_vect) {
 61e:	1f 92       	push	r1
 620:	0f 92       	push	r0
 622:	0f b6       	in	r0, 0x3f	; 63
 624:	0f 92       	push	r0
 626:	11 24       	eor	r1, r1
 628:	8f 93       	push	r24
 62a:	9f 93       	push	r25
	PORTB ^= (1 << PB1);
 62c:	95 b1       	in	r25, 0x05	; 5
 62e:	82 e0       	ldi	r24, 0x02	; 2
 630:	89 27       	eor	r24, r25
 632:	85 b9       	out	0x05, r24	; 5
}
 634:	9f 91       	pop	r25
 636:	8f 91       	pop	r24
 638:	0f 90       	pop	r0
 63a:	0f be       	out	0x3f, r0	; 63
 63c:	0f 90       	pop	r0
 63e:	1f 90       	pop	r1
 640:	18 95       	reti

00000642 <__udivmodsi4>:
 642:	a1 e2       	ldi	r26, 0x21	; 33
 644:	1a 2e       	mov	r1, r26
 646:	aa 1b       	sub	r26, r26
 648:	bb 1b       	sub	r27, r27
 64a:	fd 01       	movw	r30, r26
 64c:	0d c0       	rjmp	.+26     	; 0x668 <__udivmodsi4_ep>

0000064e <__udivmodsi4_loop>:
 64e:	aa 1f       	adc	r26, r26
 650:	bb 1f       	adc	r27, r27
 652:	ee 1f       	adc	r30, r30
 654:	ff 1f       	adc	r31, r31
 656:	a2 17       	cp	r26, r18
 658:	b3 07       	cpc	r27, r19
 65a:	e4 07       	cpc	r30, r20
 65c:	f5 07       	cpc	r31, r21
 65e:	20 f0       	brcs	.+8      	; 0x668 <__udivmodsi4_ep>
 660:	a2 1b       	sub	r26, r18
 662:	b3 0b       	sbc	r27, r19
 664:	e4 0b       	sbc	r30, r20
 666:	f5 0b       	sbc	r31, r21

00000668 <__udivmodsi4_ep>:
 668:	66 1f       	adc	r22, r22
 66a:	77 1f       	adc	r23, r23
 66c:	88 1f       	adc	r24, r24
 66e:	99 1f       	adc	r25, r25
 670:	1a 94       	dec	r1
 672:	69 f7       	brne	.-38     	; 0x64e <__udivmodsi4_loop>
 674:	60 95       	com	r22
 676:	70 95       	com	r23
 678:	80 95       	com	r24
 67a:	90 95       	com	r25
 67c:	9b 01       	movw	r18, r22
 67e:	ac 01       	movw	r20, r24
 680:	bd 01       	movw	r22, r26
 682:	cf 01       	movw	r24, r30
 684:	08 95       	ret

00000686 <__tablejump2__>:
 686:	ee 0f       	add	r30, r30
 688:	ff 1f       	adc	r31, r31
 68a:	05 90       	lpm	r0, Z+
 68c:	f4 91       	lpm	r31, Z
 68e:	e0 2d       	mov	r30, r0
 690:	09 94       	ijmp

00000692 <_exit>:
 692:	f8 94       	cli

00000694 <__stop_program>:
 694:	ff cf       	rjmp	.-2      	; 0x694 <__stop_program>
