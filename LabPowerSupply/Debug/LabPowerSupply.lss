
LabPowerSupply.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000246  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000246  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000246  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000278  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000802  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006e8  00000000  00000000  00000b32  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003d8  00000000  00000000  0000121a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000fc  00000000  00000000  000015f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f0  00000000  00000000  000016f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000e8  00000000  00000000  00001ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00001bc8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 9c 00 	jmp	0x138	; 0x138 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 dd 00 	call	0x1ba	; 0x1ba <main>
  88:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <ADC_Init>:

	// Set the channel to ADCIN0
	ADMUX &= ~((1 << MUX3) | (1 << MUX2) | (1 << MUX1) | (1 << MUX0));
}

void ADC_In(void) {
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	80 64       	ori	r24, 0x40	; 64
  98:	80 83       	st	Z, r24
  9a:	80 81       	ld	r24, Z
  9c:	8f 77       	andi	r24, 0x7F	; 127
  9e:	80 83       	st	Z, r24
  a0:	aa e7       	ldi	r26, 0x7A	; 122
  a2:	b0 e0       	ldi	r27, 0x00	; 0
  a4:	8c 91       	ld	r24, X
  a6:	8b 6a       	ori	r24, 0xAB	; 171
  a8:	8c 93       	st	X, r24
  aa:	8c 91       	ld	r24, X
  ac:	8b 7f       	andi	r24, 0xFB	; 251
  ae:	8c 93       	st	X, r24
  b0:	ab e7       	ldi	r26, 0x7B	; 123
  b2:	b0 e0       	ldi	r27, 0x00	; 0
  b4:	8c 91       	ld	r24, X
  b6:	83 60       	ori	r24, 0x03	; 3
  b8:	8c 93       	st	X, r24
  ba:	8c 91       	ld	r24, X
  bc:	8b 7f       	andi	r24, 0xFB	; 251
  be:	8c 93       	st	X, r24
  c0:	80 81       	ld	r24, Z
  c2:	80 7f       	andi	r24, 0xF0	; 240
  c4:	80 83       	st	Z, r24
  c6:	08 95       	ret

000000c8 <__vector_21>:
	
}

ISR (ADC_vect) {
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	2f 93       	push	r18
  d4:	8f 93       	push	r24
  d6:	9f 93       	push	r25
	static uint8_t cnt = 0;
	TIFR0 = (1 << OCF0A);
  d8:	82 e0       	ldi	r24, 0x02	; 2
  da:	85 bb       	out	0x15, r24	; 21

	if ((cnt == 1)) {
  dc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  e0:	81 30       	cpi	r24, 0x01	; 1
  e2:	69 f4       	brne	.+26     	; 0xfe <__vector_21+0x36>
		if (ADC >= 512) {
  e4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
  e8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
  ec:	81 15       	cp	r24, r1
  ee:	92 40       	sbci	r25, 0x02	; 2
  f0:	10 f0       	brcs	.+4      	; 0xf6 <__vector_21+0x2e>
			PORTB |= (1 << PB1);
  f2:	29 9a       	sbi	0x05, 1	; 5
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <__vector_21+0x30>
		} else {
			PORTB &= ~(1 << PB1);
  f6:	29 98       	cbi	0x05, 1	; 5
		}
		cnt = 0;
  f8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
  fc:	03 c0       	rjmp	.+6      	; 0x104 <__vector_21+0x3c>
	} else {
		cnt++;
  fe:	8f 5f       	subi	r24, 0xFF	; 255
 100:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	}
}
 104:	9f 91       	pop	r25
 106:	8f 91       	pop	r24
 108:	2f 91       	pop	r18
 10a:	0f 90       	pop	r0
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	0f 90       	pop	r0
 110:	1f 90       	pop	r1
 112:	18 95       	reti

00000114 <__vector_1>:
#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>
#include "ADC.h"

ISR (INT0_vect) {
 114:	1f 92       	push	r1
 116:	0f 92       	push	r0
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	0f 92       	push	r0
 11c:	11 24       	eor	r1, r1
 11e:	8f 93       	push	r24
 120:	9f 93       	push	r25
	// static uint8_t LED = 0x00;
	PORTB ^= (1 << PB0);
 122:	95 b1       	in	r25, 0x05	; 5
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	89 27       	eor	r24, r25
 128:	85 b9       	out	0x05, r24	; 5
}
 12a:	9f 91       	pop	r25
 12c:	8f 91       	pop	r24
 12e:	0f 90       	pop	r0
 130:	0f be       	out	0x3f, r0	; 63
 132:	0f 90       	pop	r0
 134:	1f 90       	pop	r1
 136:	18 95       	reti

00000138 <__vector_14>:

ISR (TIMER0_COMPA_vect) {
 138:	1f 92       	push	r1
 13a:	0f 92       	push	r0
 13c:	0f b6       	in	r0, 0x3f	; 63
 13e:	0f 92       	push	r0
 140:	11 24       	eor	r1, r1
 142:	8f 93       	push	r24
 144:	9f 93       	push	r25
	static uint8_t overflowCounter = 0;

	if (overflowCounter == 1) {
 146:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <overflowCounter.1742>
 14a:	81 30       	cpi	r24, 0x01	; 1
 14c:	39 f4       	brne	.+14     	; 0x15c <__vector_14+0x24>
		PORTB ^= (1 << PB1);
 14e:	95 b1       	in	r25, 0x05	; 5
 150:	82 e0       	ldi	r24, 0x02	; 2
 152:	89 27       	eor	r24, r25
 154:	85 b9       	out	0x05, r24	; 5
		overflowCounter = 0;
 156:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <overflowCounter.1742>
 15a:	03 c0       	rjmp	.+6      	; 0x162 <__vector_14+0x2a>
	} else {
		overflowCounter++;
 15c:	8f 5f       	subi	r24, 0xFF	; 255
 15e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <overflowCounter.1742>
	}
}
 162:	9f 91       	pop	r25
 164:	8f 91       	pop	r24
 166:	0f 90       	pop	r0
 168:	0f be       	out	0x3f, r0	; 63
 16a:	0f 90       	pop	r0
 16c:	1f 90       	pop	r1
 16e:	18 95       	reti

00000170 <INT0_EnableOnFallingEdge>:

void INT0_EnableOnFallingEdge(void) {
	// Configure PD2 as an input pin:
	DDRD &= ~(1 << PD2);
 170:	52 98       	cbi	0x0a, 2	; 10

	// Falling edge setup:
	EICRA |= (1 << ISC01);
 172:	e9 e6       	ldi	r30, 0x69	; 105
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 81       	ld	r24, Z
 178:	82 60       	ori	r24, 0x02	; 2
 17a:	80 83       	st	Z, r24
	EICRA &= ~(1 << ISC00);
 17c:	80 81       	ld	r24, Z
 17e:	8e 7f       	andi	r24, 0xFE	; 254
 180:	80 83       	st	Z, r24

	// Enable INT0 interrupt:
	EIMSK |= (1 << INT0);
 182:	e8 9a       	sbi	0x1d, 0	; 29
 184:	08 95       	ret

00000186 <OutputLEDConfigure>:
}

void OutputLEDConfigure(void) {
	// Configure PB0 as output:
	DDRB |= ((1 << PB0) | (1 << PB1));
 186:	84 b1       	in	r24, 0x04	; 4
 188:	83 60       	ori	r24, 0x03	; 3
 18a:	84 b9       	out	0x04, r24	; 4
 18c:	08 95       	ret

0000018e <TIMER0_EnableOnCTC>:
}

void TIMER0_EnableOnCTC(void) {
	// Configure Control Register A for normal port operation:
	TCCR0A &= ~((1 << COM0A0) | (1 << COM0A1));
 18e:	84 b5       	in	r24, 0x24	; 36
 190:	8f 73       	andi	r24, 0x3F	; 63
 192:	84 bd       	out	0x24, r24	; 36

	// Set up CTC mode:
	TCCR0A |= (1 << WGM01);
 194:	84 b5       	in	r24, 0x24	; 36
 196:	82 60       	ori	r24, 0x02	; 2
 198:	84 bd       	out	0x24, r24	; 36
	TCCR0A &= ~(1 << WGM00);
 19a:	84 b5       	in	r24, 0x24	; 36
 19c:	8e 7f       	andi	r24, 0xFE	; 254
 19e:	84 bd       	out	0x24, r24	; 36
	TCCR0B &= ~(1 << WGM02);
 1a0:	85 b5       	in	r24, 0x25	; 37
 1a2:	87 7f       	andi	r24, 0xF7	; 247
 1a4:	85 bd       	out	0x25, r24	; 37

	// Initialise timer and select the compare match:
	TCNT0 = 0x00;
 1a6:	16 bc       	out	0x26, r1	; 38
	OCR0A = 0xF4;
 1a8:	84 ef       	ldi	r24, 0xF4	; 244
 1aa:	87 bd       	out	0x27, r24	; 39
	
	// Enable Output Compare interrupts:
	// TIMSK0 |= (1 << OCIE0A);

	// Set clock pre-scaler to CLK/1024:
	TCCR0B |= (1 << CS02) | (1 << CS00);
 1ac:	85 b5       	in	r24, 0x25	; 37
 1ae:	85 60       	ori	r24, 0x05	; 5
 1b0:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~(1 << CS01);
 1b2:	85 b5       	in	r24, 0x25	; 37
 1b4:	8d 7f       	andi	r24, 0xFD	; 253
 1b6:	85 bd       	out	0x25, r24	; 37
 1b8:	08 95       	ret

000001ba <main>:
}

int main(void) {
	OutputLEDConfigure();
 1ba:	0e 94 c3 00 	call	0x186	; 0x186 <OutputLEDConfigure>
	INT0_EnableOnFallingEdge();
 1be:	0e 94 b8 00 	call	0x170	; 0x170 <INT0_EnableOnFallingEdge>
	TIMER0_EnableOnCTC();
 1c2:	0e 94 c7 00 	call	0x18e	; 0x18e <TIMER0_EnableOnCTC>
	ADC_Init();
 1c6:	0e 94 48 00 	call	0x90	; 0x90 <ADC_Init>
	sei();
 1ca:	78 94       	sei
 1cc:	ff cf       	rjmp	.-2      	; 0x1cc <main+0x12>

000001ce <_exit>:
 1ce:	f8 94       	cli

000001d0 <__stop_program>:
 1d0:	ff cf       	rjmp	.-2      	; 0x1d0 <__stop_program>
